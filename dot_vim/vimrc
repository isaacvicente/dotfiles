" 
" ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
" ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
" ██║   ██║██║██╔████╔██║██████╔╝██║     
" ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║     
"  ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"   ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝
"

" ---------------------------------------------------------
" Plugins related
" ---------------------------------------------------------

" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'sainnhe/gruvbox-material'

call plug#end()

" ---------------------------------------------------------
" Sane defaults
" ---------------------------------------------------------

" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
" We set it explicitely to make our position clear!
set nocompatible

filetype plugin indent on  " Load plugins according to detected filetype.
syntax on                  " Enable syntax highlighting.

set number                 " Show line numbers.
set relativenumber         " Enables relative line numbering mode.
set autoindent             " Indent according to previous line.
set expandtab              " Use spaces instead of tabs.
set softtabstop =4         " Tab key indents by 4 spaces.
set shiftwidth  =4         " >> indents by 4 spaces.
set shiftround             " >> indents to next multiple of 'shiftwidth'.
set scrolloff   =4         " Keep 4 lines below and above the cursor

set noerrorbells visualbell t_vb=  " Disable audible bell because it's annoying.
set shortmess   +=I        " Disable the default Vim startup message.
set mouse       +=a        " Enable mouse support.

set backspace   =indent,eol,start  " Make backspace work as you would expect.
set hidden                 " Switch between buffers without having to save first.
set laststatus  =2         " Always show statusline.
set display     =lastline  " Show as much as possible of the last line.

set showmode               " Show current mode in command-line.
set showcmd                " Show already typed keys when more are expected.
set wildmenu               " Shows a more advanced menu for auto-completion suggestions.

set incsearch              " Highlight while searching with / or ?.
set ignorecase             " If using just lowercase characters, search case insensitive.
set smartcase              " If using at least one uppercase character, search case sensitive.

set timeoutlen=500 ttimeoutlen=0   " Make ESC a little faster

set ttyfast                " Faster redrawing.
set lazyredraw             " Only redraw when necessary.

set splitbelow             " Open new windows below the current window.
set splitright             " Open new windows right of the current window.

set cursorline             " Find the current line quickly.
set wrapscan               " Searches wrap around end-of-file.
set report      =0         " Always report changed lines.
set synmaxcol   =200       " Only highlight the first 200 columns.

" Q in normal mode enters Ex mode. You almost never want this.
nmap Q <Nop> 

" ---------------------------------------------------------
" Mappings
" ---------------------------------------------------------

"" Set the leader key as <Space>
nnoremap <SPACE> <Nop>
let mapleader=" "

"" Saner behavior of n and N
" n to always search forward and N backward
" (https://github.com/mhinz/vim-galore#saner-behavior-of-n-and-n)
nnoremap <expr> n  'Nn'[v:searchforward]
xnoremap <expr> n  'Nn'[v:searchforward]
onoremap <expr> n  'Nn'[v:searchforward]

nnoremap <expr> N  'nN'[v:searchforward]
xnoremap <expr> N  'nN'[v:searchforward]
onoremap <expr> N  'nN'[v:searchforward]

"" Saner command-line history
" (https://github.com/mhinz/vim-galore#saner-command-line-history)
cnoremap <expr> <c-n> wildmenumode() ? "\<c-n>" : "\<down>"
cnoremap <expr> <c-p> wildmenumode() ? "\<c-p>" : "\<up>"

"" Saner CTRL-L
" (https://github.com/mhinz/vim-galore#saner-ctrl-l)
nnoremap <leader>l :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

"" Quickly move current line
" (https://github.com/mhinz/vim-galore#quickly-move-current-line)
" Sometimes I need a quick way to move the current line above or below
nnoremap [e  :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e  :<c-u>execute 'move +'. v:count1<cr>

"" Don't lose selection when shifting sidewards
" (https://github.com/mhinz/vim-galore#dont-lose-selection-when-shifting-sidewards)
xnoremap <  <gv
xnoremap >  >gv

"" Nvim defaults
" Yank from cursor to the end of line
nnoremap Y y$
nnoremap <C-L> <Cmd>nohlsearch<Bar>diffupdate<Bar>normal! <C-L><CR>
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
xnoremap * y/\V<C-R>"<CR>
xnoremap # y?\V<C-R>"<CR>
nnoremap & :&&>CR>

"" Open the NetRW explorer
nnoremap <leader>e :Vex<CR>
nnoremap <leader><CR> :so ~/.vim/vimrc<CR>

"" Makes delete do not copy any shit
" If want to cut something, select with v/V and type x
nnoremap d "_d
nnoremap D "_D
vnoremap d "_d

" ---------------------------------------------------------
" GUI related
" ---------------------------------------------------------

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Enable more colors so you can use the Catppuccin color scheme
set termguicolors

" ---------------------------------------------------------
" Colorscheme
" ---------------------------------------------------------

" Set the catppucin_mocha colorscheme
" if &runtimepath =~ 'catppuccin'
"     silent! colorscheme catppuccin_mocha
" else
"     colorscheme retrobox
" endif

" Or... set the gruvbox-material theme
if &runtimepath =~ 'gruvbox-material'
    set background=dark
    let g:gruvbox_material_background = 'hard'
    silent! colorscheme gruvbox-material
else
    colorscheme retrobox
endif

" ---------------------------------------------------------
" Status line
" ---------------------------------------------------------

" Set the catppuccin_mocha color scheme provided by https://github.com/catppuccin/vim#lightline
" if &runtimepath =~ 'catppuccin' && &runtimepath =~ 'lightline.vim'
"     let g:lightline = {'colorscheme': 'catppuccin_mocha'} 
" endif

" Or... set the gruvbox-material theme provided by https://github.com/sainnhe/gruvbox-material/blob/master/doc/gruvbox-material.txt
if &runtimepath =~ 'gruvbox-material' && &runtimepath =~ 'lightline.vim'
    let g:lightline = {'colorscheme': 'gruvbox_material'} 
endif
